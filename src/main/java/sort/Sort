排序算法大纲

    分类：
        内部排序：数据在内部存储器中排序
        外部排序：会使用外部存储

    内部：（8种记住）         平均时间     最坏时间         稳定情况         额外空间          备注
        插入排序：
            直接插入排序       O(n^2)
            希尔排序
        选择排序：
            简单选择排序       O(n^2)
            堆排序
        交换排序:
            冒泡排序          O(n^2)
            快速排序
        归并排序
        基数排序（桶排序）


           稳定性：如果 A 原本在 B 前面，而 A = B ,排序之后 A 依然在 B 前面
         不稳定性：如果 A 原本在 B 前面，而 A = B ,排序之后 A 可能在 B 后面
    时间复杂度：

        思想很重要：
            比如：
            for(int i=1,i<=100;i++){
                total += i;
            }
            计算1-100 ，时间复杂度是O(n)
            但数学计算，(1+100)*100/2  一样得到结果，复杂度O(1)

        时间差异：
            O(2n + 20) 与 O(2n)  随着n的增大 ，20会逐渐别忽略（忽略常数项）
            O(n^2 + n) 与 O(n^2) 随着n的增大 ，2n会逐渐别忽略（忽略低次项）          时间复杂度均为O(n^2)
            O(3n^2) 与 O(5n^2)   随着n的增大 ，3和5会逐渐别忽略（忽略平方的系数）     时间复杂度均为O(n^2)
            O(3n^3) 与 O(5n^3)   随着n的增大 ，3和5影响越来越大（不能忽略次方的系数）

            推理 T(n) = n+1   F(n) = n
                T(n) / F(n) ~ 1  所以这两个是同数量及函数

        常见的时间复杂度(n越拉越来，时间复杂度依次增大)
            常数阶O(1)
                int i = 1
            对数阶O(long2 n)
                int i = 1;
                while(i<n){ i = i*2 }
            线性阶O(n)
                int i = 1;
                while(i<n){ i++ }
            线性对数阶O(nlog2 n)
                while(i<n){
                    i++;
                    while(i<n){ i = i*2 }
                }
            平方阶O(n^2)
                while(i<n){
                  i++
                  while(j<n){ j++ }
                }
            立方阶O(n^3)
                ..
            K次方阶O(n^k)
                ..
            指数阶O(2^n)  XXXX避免这个出现

